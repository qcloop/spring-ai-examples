///usr/bin/env jbang "$0" "$@" ; exit $?
//DEPS org.zeroturnaround:zt-exec:1.12
//DEPS com.fasterxml.jackson.core:jackson-databind:2.17.1
//JAVA 17
//FILES ExampleInfo.json

/*
 * Integration test launcher for filesystem
 * Generated by scaffold_integration_test.py on 2025-07-31 17:58:20
 */

import com.fasterxml.jackson.databind.*;
import org.zeroturnaround.exec.*;
import java.nio.file.*;
import java.util.concurrent.TimeUnit;
import static java.lang.System.*;

record ExampleInfo(
    int timeoutSec, 
    String[] successRegex, 
    String[] requiredEnv,
    String[] setupCommands,
    String[] cleanupCommands
) {}

public class RunFilesystem {
    
    public static void main(String... args) throws Exception {
        Path configPath = Path.of("integration-tests/ExampleInfo.json");
        ExampleInfo cfg = new ObjectMapper().readValue(configPath.toFile(), ExampleInfo.class);

        // Verify required environment variables
        for (String envVar : cfg.requiredEnv()) {
            if (getenv(envVar) == null) {
                err.println("‚ùå Missing required environment variable: " + envVar);
                exit(1);
            }
        }

        try {
            
            // Build and run the main application
            out.println("üèóÔ∏è  Building filesystem...");
            runCommand(new String[]{"./mvnw", "clean", "package", "-q", "-DskipTests"}, 300);

        // Run setup commands AFTER build to avoid clean removing test files
        if (cfg.setupCommands() != null) {
            for (String setupCmd : cfg.setupCommands()) {
                out.println("üîß Running setup: " + setupCmd);
                runCommand(setupCmd.split("\\s+"), 60); // 1 minute timeout for setup
            }
        }

            out.println("üöÄ Running filesystem...");
            // Create persistent log file for debugging
            Path logDir = Paths.get("../../integration-testing/logs/integration-tests");
            Files.createDirectories(logDir);
            Path logFile = logDir.resolve("filesystem-spring-boot-" + System.currentTimeMillis() + ".log");
            
            ProcessResult result = new ProcessExecutor()
                .command("./mvnw", "spring-boot:run", "-q")
                .timeout(cfg.timeoutSec(), TimeUnit.SECONDS)
                .redirectOutput(Files.newOutputStream(logFile))
                .redirectErrorStream(true)
                .execute();
            
            int exitCode = result.getExitValue();

            // Verify output patterns
            String output = Files.readString(logFile);
            out.println("‚úÖ Verifying output patterns...");
            out.println("üìÅ Full Spring Boot log: " + logFile.toAbsolutePath());
            
            // Show actual captured output for manual verification
            out.println("üìã Captured Application Output:");
            out.println("---");
            String[] lines = output.split("\n");
            
            for (int i = 0; i < lines.length; i++) {
                String trimmed = lines[i].trim();
                
                // Show relevant output lines for MCP filesystem
                if (trimmed.contains("Running predefined questions") || 
                    trimmed.contains("MCP Initialized") || 
                    trimmed.contains("QUESTION:") ||
                    trimmed.contains("ASSISTANT:") ||
                    trimmed.contains("filesystem")) {
                    out.println("  " + trimmed);
                }
            }
            out.println("---");
            
            int failedPatterns = 0;
            for (String pattern : cfg.successRegex()) {
                if (output.matches("(?s).*" + pattern + ".*")) {
                    out.println("  ‚úì Found: " + pattern);
                } else {
                    err.println("  ‚ùå Missing: " + pattern);
                    failedPatterns++;
                }
            }

            // Keep log file for debugging - DO NOT DELETE
            out.println("üìÅ Spring Boot log preserved: " + logFile.toAbsolutePath());

            if (exitCode != 0) {
                err.println("‚ùå Application exited with code: " + exitCode);
                exit(exitCode);
            }

            if (failedPatterns > 0) {
                err.println("‚ùå Failed pattern verification: " + failedPatterns + " patterns missing");
                exit(1);
            }

            out.println("üéâ Integration test completed successfully!");

        } finally {
        }
    }

    private static void runCommand(String[] cmd, int timeoutSec) throws Exception {
        ProcessResult result = new ProcessExecutor()
            .command(cmd)
            .timeout(timeoutSec, TimeUnit.SECONDS)
            .redirectOutput(System.out)
            .redirectError(System.err)
            .execute();
            
        int exit = result.getExitValue();
        if (exit != 0) {
            throw new RuntimeException("Command failed with exit code " + exit + ": " + String.join(" ", cmd));
        }
    }
}